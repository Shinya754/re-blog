[{"title":"博客重启","tags":["随笔"],"categories":"随笔（包括任意我不知道怎么分类的文章）","author":"千绫","excerpt":"\n# 博客重启\n\n## 固态硬盘0E事件记录\n\n什么，这不是传说中口碑最好的三星吗（笑\n\n","link":"/posts/2024-04-15-%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF"},{"title":"并查集，以及力扣924. 尽量减少恶意软件的传播","tags":["Java","算法","并查集","力扣"],"categories":"算法记录","author":"千绫","excerpt":"\n## 并查集\n\n并查集的三个主要操作：**初始化**、**查找**、**合并**\n\n","link":"/posts/2024-04-16-%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%8A%9B%E6%89%A3924.%20%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BC%A0%E6%92%AD"},{"title":"力扣1883.准时抵达会议现场的最小跳过休息次数","tags":["Java","算法","动态规划","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣1883.准时抵达会议现场的最小跳过休息次数\n\n[2024-04-19每日一题](https://leetcode.cn/problems/minimum-skips-to-arrive-at-meeting-on-time/description/?envType=daily-question&envId=2024-04-19)\n\n事实证明每当我看到题目第一反应是贪心的时候，题目就往往需要使用dp来解决。\n\n虽然想到了使用dp，但是这个状态转移方程我实在是想不到。\n\n在这一题的设计中，`dp[i][j]`代表从原点0到走过`i`段路程时，跳过`j`次休息，所需要的最少时间。所求的跳过次数作为dp数组的一个维度存在。而之前那个卖木头块所求的是最大金额。如果这一题所求的是最短时间，则从数组内容中取得答案。\n\n","link":"/posts/2024-04-19-%E5%8A%9B%E6%89%A31883.%E5%87%86%E6%97%B6%E6%8A%B5%E8%BE%BE%E4%BC%9A%E8%AE%AE%E7%8E%B0%E5%9C%BA%E7%9A%84%E6%9C%80%E5%B0%8F%E8%B7%B3%E8%BF%87%E4%BC%91%E6%81%AF%E6%AC%A1%E6%95%B0"},{"title":"re:英 汉 词 典","tags":["英语"],"categories":"英汉词典","author":"千绫","excerpt":"\n你可少用点拼音吧.jpg\n\n# 词汇\n\n递归：recursion(n.)，recursive(adj.)，`[rɪˈkɜːrsɪv]`\n\n遍历：traverse(v.)，`[ˈtrævɜːrs; trəˈvɜːrs]`\n\n","link":"/posts/2024-04-29-re-%E8%8B%B1%E6%B1%89%E8%AF%8D%E5%85%B8"},{"title":"遍历组合方式，以及力扣77.组合","tags":["Java","算法","回溯","力扣"],"categories":"算法记录","author":"千绫","excerpt":"\n## 力扣77.组合\n\n[77.组合](https://leetcode.cn/problems/combinations/description/)\n\n题目要求遍历从`1`到`n`的所有`k`个数组合，将这个遍历结果作为下标即可推广到任意集合的`k`个子元素组合。\n\n官方题解中提供了两种方法：递归（深度优先搜索/回溯）和字典序遍历\n\n","link":"/posts/2024-05-05-%E9%81%8D%E5%8E%86%E7%BB%84%E5%90%88%E6%96%B9%E5%BC%8F"},{"title":"力扣1553.吃掉N个橘子的最少天数","tags":["Java","算法","dfs","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣1553.吃掉N个橘子的最少天数\n\n[1553.吃掉N个橘子的最少天数](https://leetcode.cn/problems/minimum-number-of-days-to-eat-n-oranges/?envType=daily-question&envId=2024-05-12)\n\n一眼dp，随手写了一个提交，爆内存，然后发现数据范围是`1 <= n <= 2*10^9`。\n\n","link":"/posts/2024-05-13-%E5%8A%9B%E6%89%A31553.%E5%90%83%E6%8E%89N%E4%B8%AA%E6%A9%98%E5%AD%90%E7%9A%84%E6%9C%80%E5%B0%91%E5%A4%A9%E6%95%B0"},{"title":"力扣2589.完成所有任务的最少时间","tags":["Java","算法","贪心","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣2589.完成所有任务的最少时间\n\n[2589.完成所有任务的最少时间](https://leetcode.cn/problems/minimum-time-to-complete-all-tasks/description/?envType=daily-question&envId=2024-05-15)\n\n毫无头猪的困难题\n\n","link":"/posts/2024-05-16-%E5%8A%9B%E6%89%A32589.%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%9C%80%E5%B0%91%E6%97%B6%E9%97%B4"},{"title":"力扣402.移掉K位数字","tags":["Java","算法","单调栈","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣402.移掉K位数字\n\n[402.移掉K位数字](https://leetcode.cn/problems/remove-k-digits/description/?envType=study-plan-v2&envId=2024-spring-sprint-100)\n\n看到题目的第一想法：维护下标`p`，每次在从`p`开始的`k+1`个数字中选取一个最小且比较靠前的数字，以此代替删除数字的操作。编码如下：\n\n","link":"/posts/2024-05-18-%E5%8A%9B%E6%89%A3402.%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97"},{"title":"力扣1542.找出最长的超赞字符串","tags":["Java","算法","位运算","位掩码","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣1542.找出最长的超赞字符串\n\n[1542.找出最长的超赞字符串](https://leetcode.cn/problems/find-longest-awesome-substring/description/?envType=daily-question&envId=2024-05-20)\n\n找=抓，超赞=绝赞，所以这也是一种抓绝赞（\n\n","link":"/posts/2024-05-20-%E5%8A%9B%E6%89%A31542.%E6%89%BE%E5%87%BA%E6%9C%80%E9%95%BF%E7%9A%84%E8%B6%85%E8%B5%9E%E5%AD%97%E7%AC%A6%E4%B8%B2"},{"title":"力扣3067.在带权树网络中统计可连接服务器对数目","tags":["Java","算法","dfs","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n## 力扣3067.在带权树网络中统计可连接服务器对数目\n\n[3067.在带权树网络中统计可连接服务器对数目](https://leetcode.cn/problems/count-pairs-of-connectable-servers-in-a-weighted-tree-network/description/?envType=daily-question&envId=2024-06-04)\n\n图算法实在是学得太烂了，故记录一个好题\n\n","link":"/posts/2024-06-04-%E5%8A%9B%E6%89%A33067.%E5%9C%A8%E5%B8%A6%E6%9D%83%E6%A0%91%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%BB%9F%E8%AE%A1%E5%8F%AF%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AF%B9%E6%95%B0%E7%9B%AE"},{"title":"力扣2813.子序列最大优雅度","tags":["Java","算法","贪心","力扣"],"categories":"力扣好题记录","author":"千绫","excerpt":"\n\n## 力扣2813.子序列最大优雅度\n\n[2813.子序列最大优雅度](https://leetcode.cn/problems/maximum-elegance-of-a-k-length-subsequence/solutions/2807350/zi-xu-lie-zui-da-you-ya-du-by-leetcode-s-mw6g/?envType=daily-question&envId=2024-06-13)\n\n有一点思路，但不多。\n\n","link":"/posts/2024-06-13-%E5%8A%9B%E6%89%A32813.%E5%AD%90%E5%BA%8F%E5%88%97%E6%9C%80%E5%A4%A7%E4%BC%98%E9%9B%85%E5%BA%A6"},{"title":"曼哈顿距离和切比雪夫距离","tags":["Java","算法","距离","力扣"],"categories":"计算几何","author":"千绫","excerpt":"\n## 曼哈顿距离\n\n>在二维空间内，两个点之间的曼哈顿距离（Manhattan distance）为它们横坐标之差的绝对值与纵坐标之差的绝对值之和。\n\n设两个点的坐标为 $A(x_1, y_1)$，$B(x_2, y_2)$，则两者的曼哈顿距离为：\n\n$$\nd(A, B)=|x_1-x_2|+|y_1-y_2|\n$$\n\n","link":"/posts/2024-07-09-%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E5%92%8C%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB"},{"title":"单调栈变体-删除重复字符使得字典序最小","tags":["Java","算法","单调栈","力扣"],"categories":"算法记录","author":"千绫","excerpt":"\n## 316.去除重复字母\n\n[316.去除重复字母](https://leetcode.cn/problems/remove-duplicate-letters/description/?envType=study-plan-v2&envId=2024-spring-sprint-100)\n\n除你字母。\n\n","link":"/posts/2024-07-11-%E5%8D%95%E8%B0%83%E6%A0%88%E5%8F%98%E4%BD%93-%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%BD%BF%E5%BE%97%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F"}]
